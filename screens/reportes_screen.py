from kivymd.uix.boxlayout import MDBoxLayout
from kivymd.uix.toolbar import MDTopAppBar
from kivymd.uix.scrollview import MDScrollView
from kivymd.uix.screenmanager import MDScreenManager
from kivymd.uix.screen import MDScreen
from kivymd.uix.menu import MDDropdownMenu
from kivymd.uix.dialog import MDDialog
from kivymd.uix.button import MDRaisedButton

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from config import API_BASE_URL

# Importar m√≥dulos especializados
from .reportes_modules import (
    ReportesObrerosManager,
    ReportesModeradoresManager,
    ReportesGeneralesManager,
    ReportCard
)




class ReportesScreen(MDBoxLayout):
    """Coordinador principal del m√≥dulo de reportes modular"""

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.orientation = "vertical"
        self.spacing = "10dp"
        self.main_layout = None

        # Inicializar gestores especializados
        self.reportes_obreros = ReportesObrerosManager(self)
        self.reportes_moderadores = ReportesModeradoresManager(self)
        self.reportes_generales = ReportesGeneralesManager(self)

        self.setup_ui()

    def setup_ui(self):
        """Configurar interfaz del men√∫ principal de reportes"""
        # Screen manager para navegaci√≥n
        self.screen_manager = MDScreenManager()

        # Pantalla del men√∫ principal
        self.main_screen = MDScreen(name="menu_principal")
        self.setup_menu_principal()

        self.screen_manager.add_widget(self.main_screen)
        self.add_widget(self.screen_manager)

    def setup_menu_principal(self):
        """Configurar men√∫ principal con las 3 opciones de reportes"""
        layout = MDBoxLayout(orientation="vertical", padding="10dp", spacing="10dp")

        # Top bar
        top_bar = MDTopAppBar(
            title="Reportes CORPOTACHIRA",
            right_action_items=[["dots-vertical", lambda x: self.show_options_menu(x)]]
        )

        # Contenido del men√∫
        content_scroll = MDScrollView()
        content_layout = MDBoxLayout(orientation="vertical", spacing="15dp", adaptive_height=True)

        # Las 3 opciones principales de reportes (nuevo orden)
        reportes_opciones = [
            {
                "titulo": "üìà Reportes Generales",
                "descripcion": "Reportes de actividades de cuadrillas con gesti√≥n de herramientas",
                "color": (1, 0.95, 1, 1),
                "accion": self.mostrar_reportes_generales
            },
            {
                "titulo": "üë§ Reportes de Moderadores",
                "descripcion": "An√°lisis espec√≠fico de moderadores y comparaciones",
                "color": (0.95, 0.95, 1, 1),
                "accion": self.mostrar_reportes_moderadores
            },
            {
                "titulo": "üë∑‚Äç‚ôÇÔ∏è Reportes de Obreros",
                "descripcion": "Estad√≠sticas detalladas, distribuci√≥n de tallas y an√°lisis de obreros",
                "color": (0.95, 1, 0.95, 1),
                "accion": self.mostrar_reportes_obreros
            }
        ]

        for opcion in reportes_opciones:
            reporte_card = ReportCard(
                titulo=opcion["titulo"],
                descripcion=opcion["descripcion"],
                color=opcion["color"],
                on_click=opcion["accion"]
            )
            content_layout.add_widget(reporte_card)

        content_scroll.add_widget(content_layout)

        layout.add_widget(top_bar)
        layout.add_widget(content_scroll)

        self.main_screen.add_widget(layout)

    def mostrar_reportes_obreros(self):
        """Mostrar m√≥dulo de reportes de obreros"""
        self.reportes_obreros.mostrar_reportes_obreros()

    def mostrar_reportes_moderadores(self):
        """Mostrar m√≥dulo de reportes de moderadores"""
        self.reportes_moderadores.mostrar_reportes_moderadores()

    def mostrar_reportes_generales(self):
        """Mostrar m√≥dulo de reportes generales"""
        self.reportes_generales.mostrar_reportes_generales()

    def mostrar_menu_reportes(self):
        """Volver al men√∫ principal de reportes"""
        self.clear_widgets()
        self.setup_ui()

    def show_main_screen(self):
        """Mostrar la pantalla principal de reportes (compatibilidad)"""
        self.mostrar_menu_reportes()

    def show_options_menu(self, button):
        """Mostrar men√∫ desplegable con opciones"""
        # Limpiar men√∫ anterior para optimizar memoria
        if hasattr(self, 'menu') and self.menu:
            self.menu.dismiss()
            self.menu = None

        # Crear elementos del men√∫
        menu_items = [
            {
                "text": "Cerrar Sesi√≥n",
                "icon": "logout",
                "on_release": lambda x="cerrar_sesion": self.handle_menu_option(x),
            },
            {
                "text": "Informaci√≥n Personal",
                "icon": "account-circle",
                "on_release": lambda x="info_personal": self.handle_menu_option(x),
            },
        ]

        # Crear y mostrar el men√∫
        self.menu = MDDropdownMenu(
            caller=button,
            items=menu_items,
            width_mult=4,
        )
        self.menu.open()

    def handle_menu_option(self, option):
        """Manejar las opciones del men√∫ desplegable"""
        self.menu.dismiss()

        if option == "cerrar_sesion":
            # Mostrar di√°logo de confirmaci√≥n antes de cerrar sesi√≥n v8.1
            self.show_logout_confirmation_dialog()
        elif option == "info_personal":
            self.navegar_a_info_personal()

    def show_dialog(self, title, text):
        """Mostrar dialog informativo"""
        dialog = MDDialog(
            title=title,
            text=text,
            buttons=[
                MDRaisedButton(
                    text="OK",
                    on_release=lambda x: dialog.dismiss()
                )
            ]
        )
        dialog.open()

    def navegar_a_info_personal(self):
        """Navegar a la pantalla de informaci√≥n personal"""
        try:
            from kivymd.app import MDApp
            app = MDApp.get_running_app()

            # Navegar a trav√©s del screen manager
            if hasattr(app.root, 'screen_manager'):
                # Primero agregar la pantalla si no existe
                try:
                    info_screen = app.root.screen_manager.get_screen('info_personal')
                except:
                    # Si no existe, la creamos
                    from screens.info_personal_screen import InfoPersonalScreen
                    info_screen = InfoPersonalScreen()
                    app.root.screen_manager.add_widget(info_screen)

                # La pesta√±a de origen se detectar√° autom√°ticamente en on_enter()

                # Navegar a la pantalla
                app.root.screen_manager.current = 'info_personal'
            else:
                print("‚ùå No se pudo acceder al screen manager")

        except Exception as e:
            print(f"‚ùå Error navegando a informaci√≥n personal: {e}")
            self.show_dialog("Error", "No se pudo abrir la informaci√≥n personal")

    def show_logout_confirmation_dialog(self):
        """
        Mostrar di√°logo de confirmaci√≥n para cerrar sesi√≥n v8.1
        Con opciones: Cancelar y Salir
        """
        from kivymd.uix.button import MDFlatButton

        # Crear botones del di√°logo
        cancel_button = MDFlatButton(
            text="Cancelar",
            on_release=lambda x: self.logout_dialog.dismiss()
        )

        logout_button = MDRaisedButton(
            text="Salir",
            md_bg_color=[1, 0.3, 0.3, 1],  # Rojo para acci√≥n de salida
            on_release=lambda x: self.confirm_logout()
        )

        # Crear di√°logo de confirmaci√≥n
        self.logout_dialog = MDDialog(
            title="Confirmar Cierre de Sesi√≥n",
            text="¬øEst√°s seguro de que deseas cerrar tu sesi√≥n?\n\nTendr√°s que volver a iniciar sesi√≥n para acceder nuevamente.",
            buttons=[cancel_button, logout_button],
            size_hint=(0.8, None)
        )

        self.logout_dialog.open()

    def confirm_logout(self):
        """
        Ejecutar cierre de sesi√≥n despu√©s de confirmaci√≥n v8.1
        """
        # Cerrar di√°logo de confirmaci√≥n
        self.logout_dialog.dismiss()

        try:
            from kivymd.app import MDApp
            from kivymd.uix.snackbar import MDSnackbar
            from kivymd.uix.label import MDLabel
            from kivy.metrics import dp

            app = MDApp.get_running_app()

            # Limpiar variables de sesi√≥n
            app.nivel_usuario = ''
            app.token_sesion = ''
            app.user_data = {}
            app.nombre_usuario = ''

            # Navegar a pantalla de selecci√≥n de rol
            if hasattr(app.root, 'screen_manager'):
                app.root.screen_manager.current = 'role_selection'

            # Mostrar feedback visual (snackbar verde)
            snackbar = MDSnackbar(
                MDLabel(
                    text="Sesi√≥n cerrada exitosamente",
                    theme_text_color="Custom",
                    text_color=(1, 1, 1, 1)
                ),
                y=dp(24),
                pos_hint={"center_x": 0.5},
                size_hint_x=0.8,
                md_bg_color=(0.2, 0.7, 0.2, 1),  # Verde
                duration=2
            )
            snackbar.open()

        except Exception as e:
            print(f"‚ùå Error cerrando sesi√≥n: {e}")
            self.show_dialog(
                "Error",
                "Ocurri√≥ un error al intentar cerrar sesi√≥n."
            )